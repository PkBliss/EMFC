package main.java.com.xmltodat.xmltodat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Scanner;
import java.util.jar.Attributes.Name;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.codehaus.jackson.node.ObjectNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Scope;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.MultiValueMap;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.tags.Param;

import main.java.bean.Rootpath;


/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	

	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	int jaid;
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/test", method = RequestMethod.GET)
	public String home1(Locale locale, Model model) 
	{
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		
		return "home1";
	}
	

	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public String home(@RequestParam("rootpath") String rootpath,@RequestParam("aid") int aid, Model model) throws IOException {
		Rootpath.setRootpath(rootpath);
		Rootpath.setAid(aid);
		HomeController obj1 = new HomeController();
		Map countryList1 = obj1.readfile();
		String txtFilePath1 = Rootpath.getRootpath()+ "CAR_"+Rootpath.getAid()+"_Errorlog.txt";
		 File f = new File(txtFilePath1);
		if(f.exists() && !f.isDirectory())
		{ 
			Map errorlist1 = obj1.readlogfile();
	        model.addAttribute("eList", errorlist1);		
		}
		String xmlFilePath1 = Rootpath.getRootpath()+ "CAR_"+Rootpath.getAid()+".xml";
		 File fxml = new File(xmlFilePath1);
		if(fxml.exists() && !fxml.isDirectory()) 
		{ 
			
			//Map xmllist = obj1.readlogfile();
			BufferedReader reader = new BufferedReader(new FileReader(xmlFilePath1));
            StringBuilder sb = new StringBuilder();
            String line;
            while((line = reader.readLine())!= null){
                sb.append(line+"\n");
            }
            reader.close();
			
	        model.addAttribute("xmlString", sb.toString().trim());		
		}
		
        model.addAttribute("cList", countryList1);

	    return "home";
	}
	

	public Map readfile() throws FileNotFoundException
	{
		Scanner scanner = new Scanner(new FileReader("d:\\keyword.txt"));

        Map<String,String> countryList = new LinkedHashMap<String,String>(); 

        while (scanner.hasNextLine()) {
            //String[] columns = scanner.nextLine().split("\t\t");
        	String columns = scanner.nextLine();
            countryList.put(columns, columns);
        }
		return countryList;

	}
	
	public Map readlogfile() throws FileNotFoundException
	{
		String txtFilePath1 = Rootpath.getRootpath()+ "CAR_"+Rootpath.getAid()+"_Errorlog.txt";
		 File f = new File(txtFilePath1);

		Scanner scanner = new Scanner(new FileReader(txtFilePath1));

        Map<String,String> errorlist = new LinkedHashMap<String,String>(); 
        String key = "empty";
        int count=0;
        while (scanner.hasNextLine())
        {
            //String[] columns = scanner.nextLine().split("\t\t");
        	String columns = scanner.nextLine();
        	String columns1 = columns.replace("\"", " ");
        	//Pattern pattern = Pattern.compile("_\\w+");
        	Pattern pattern = Pattern.compile("lineno:\\w+.");
        	//String columns1 =columns;
        	Matcher matcher = pattern.matcher(columns);
        	if (matcher.find())
        	{
        	    key = matcher.group();
        	}
        	else{
        		
               	key = "empty"+ count++;
        	}
        	
 			errorlist.put(key, columns);
        }
		return errorlist;

	}
	
	@RequestMapping(value = "/validate", method = RequestMethod.GET)
	public String validate(@RequestParam String action, Model m) throws FileNotFoundException 
	{

		HomeController obj = new HomeController();
	       if( action.equals("action1") ){
	           System.out.println("Validation bck called");
	            //handle save
//	           obj.execu();
	         }
	         else if( action.equals("action2") ){
	             System.out.println("submit button clicked");
	            //handle renew
	         }else{
	     		System.out.println("Kaliaperumal==========>"+action);
	         }
	           Map countryList1 = obj.readfile();
	           m.addAttribute("cList", countryList1);

	           return "home";
	}
	
//	@RequestMapping(value="/processForm",params="action1",method=RequestMethod.POST)
//    public String validation(Model m) throws IOException
//    {
//        System.out.println("validation block called");
//        HomeController obj = new HomeController();
//        obj.execu();
//        obj.showResourceData();
//		Map countryList1 = obj.readfile();
//        m.addAttribute("cList", countryList1);
//
//        m.addAttribute("logpath", "d:\\sample_Errorlog.txt");
//    	return "home";
//
//    }
//
//	@RequestMapping(value="/processForm",params="action2",method=RequestMethod.POST)
//    public String submit()
//    {
//        System.out.println("submit block called");
//    	return "home";
//
//    }
	
	public static void execu(int jaid, String jrootpath, String exepath)
	{
	    Runtime r=Runtime.getRuntime();
	    Process p=null;
	    try
	    {
	    	Rootpath rp= new Rootpath();
	    	String datparam = jrootpath+ "CAR_"+jaid+".dat";
	      //String s="B:\\OPSBANKII_Tools\\OpsBankIIValidation\\OPSBANKII2CAR.exe "+ jrootpath+ "CAR_"+jaid+".dat";
	    	String s=exepath+" "+ jrootpath+ "CAR_"+jaid+".dat";
	      System.out.println("Final EXE call path===>"+s);
	      p=r.exec(s);
	    }
	    catch(Exception e){
	      System.out.println("error==="+e.getMessage());
	      e.printStackTrace();
	    }
	  }


	
	@RequestMapping(value = "/datfilesave", method = RequestMethod.POST)
    public @ResponseBody String post(@RequestBody ObjectNode json) throws IOException 
    {
		//System.out.println(json.get("datcontent").asText());
		String newcontent = json.get("datcontent").toString();
		FileSave objFileSave = new FileSave();
		objFileSave.savedat(newcontent);
		 return "success";
    }


	
	@Value("${AIP}")
	private String AIP;
	@Value("${EFLOW}")
	private String EFLOW;
	@Value("${CEP}")
	private String CEP;
	@Value("${Wiley_Archive}")
	private String Wiley_Archive;
	@Value("${datvalidation}")
	private String datvalidation;
	@RequestMapping(value = "/validate", method = RequestMethod.POST)
    public @ResponseBody String validatepost(@RequestBody ObjectNode json) throws IOException
    {
        // ... Do whatever you want
		//jaid = Integer.parseInt(jaid);
		jaid= Integer.parseInt(AIP, jaid);
		String jrootpath = json.get("rootpath").toString();
		String jprocess =json.get("process").toString();
		String dat2xml="INVALID";
		
		System.out.println(jaid +"===>"+"******NEED TO CHECK*****");
		
		
	/*	int jaid = json.get("aid").asInt();
		String jrootpath = json.get("rootpath").asText();
		String jprocess =json.get("process").asText();
		String dat2xml="INVALID";*/
		//System.out.println(jaid +"===>"+jrootpath);
//    	System.out.println("AIP ==============> "+AIP);
//    	System.out.println("EFLOW ==============> "+EFLOW);
//    	System.out.println("CEP ==============> "+CEP);
//    	System.out.println("Wiley_Archive ==============> "+Wiley_Archive);
    	Pattern p = Pattern.compile("(AIP|EFLOW|CEP|Wiley_Archive)");
    	Matcher m = p.matcher(jrootpath);
    	while (m.find()) {
    	   String matched = m.group(1);
    	   // Do something
    	   System.out.println("Client ====> "+matched);
    	   if(matched.equals("AIP")){
        	   dat2xml = AIP;
    	   }else if(matched.equals("EFLOW")){
        	   dat2xml = EFLOW;
    	   }else if(matched.equals("CEP")){
        	   dat2xml = CEP;
    	   }
    	   else if(matched.equals("Wiley_Archive"))
    	   {
        	   dat2xml = Wiley_Archive;   		   
    	   }
    	}
	System.out.println("dat2xml path ====> "+dat2xml);
		if(jprocess.equals("datvalidation")){
			execu(jaid, jrootpath, datvalidation);	
		}
		else if(jprocess.equals("dattoxmlconvertion"))
		{
			execu(jaid, jrootpath, dat2xml);
		}
			return "success";
    }

	
	}

